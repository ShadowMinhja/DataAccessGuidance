<?xml version="1.0" encoding="utf-8"?>
<!--For more information on how to configure your ASP.NET application, please visit
http://go.microsoft.com/fwlink/?LinkId=169433
-->
<configuration>
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />
  </configSections>

  <!-- Uncomment to use DiagnosticMonitorTraceListener for debugging or troubleshooting Windows Azure deployment. -->
  <!--<system.diagnostics>
    <trace>
      <listeners>
        <add type="Microsoft.WindowsAzure.Diagnostics.DiagnosticMonitorTraceListener, Microsoft.WindowsAzure.Diagnostics, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" name="AzureDiagnostics">
          <filter type="" />
        </add>
      </listeners>
    </trace>
  </system.diagnostics>-->

  <connectionStrings>
    <add name="DefaultConnection" providerName="System.Data.SqlClient" connectionString="Data Source=(LocalDb)\v11.0;Initial Catalog=eCommerce;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\eCommerce.mdf" />

    <!--connection string for SQLExpress-->
    <!--<add name="AdventureWorksContext" connectionString="Data Source=(local)\SQLExpress;Initial Catalog=AdventureWorks2012; Integrated Security=SSPI" providerName="System.Data.SqlClient" />-->

    <!--connection string for Visual Studio Local DB-->
    <add name="AdventureWorksContext" connectionString="Data Source=(localDB)\v11.0;Initial Catalog=eCommerce; Integrated Security=SSPI" providerName="System.Data.SqlClient" />

    <!--Azure Connection String-->
    <!--<add name="AdventureWorksContext" connectionString="Server=tcp:xo8dpkuomp.database.windows.net,1433;Database=eCommerce;User ID=shadowminhja@xo8dpkuomp;Password={your_password_here};Trusted_Connection=False;Encrypt=True;Connection Timeout=30;" providerName="System.Data.SqlClient" />-->
  </connectionStrings>

  <appSettings>
    <add key="webpages:Version" value="2.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="PreserveLoginUrl" value="true" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
    <add key="windowsAzureStorageConnectionString" value="UseDevelopmentStorage=true" />

    <!-- app logic settings -->
    <add key="CORSHandlerAllowedHosts" value="127.0.0.1,localhost" />
  </appSettings>

  <system.web>
    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5" />
    <authentication mode="None" />
    <pages>
      <namespaces>
        <add namespace="System.Web.Helpers" />
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Optimization" />
        <add namespace="System.Web.Routing" />
        <add namespace="System.Web.WebPages" />
      </namespaces>
    </pages>
    <profile defaultProvider="DefaultProfileProvider">
      <providers>
        <add name="DefaultProfileProvider" type="System.Web.Providers.DefaultProfileProvider, System.Web.Providers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" connectionStringName="DefaultConnection" applicationName="/" />
      </providers>
    </profile>
    <membership defaultProvider="DefaultMembershipProvider">
      <providers>
        <add name="DefaultMembershipProvider" type="System.Web.Providers.DefaultMembershipProvider, System.Web.Providers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" connectionStringName="DefaultConnection" enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="false" maxInvalidPasswordAttempts="5" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10" applicationName="/" />
      </providers>
    </membership>
    <roleManager defaultProvider="DefaultRoleProvider">
      <providers>
        <add name="DefaultRoleProvider" type="System.Web.Providers.DefaultRoleProvider, System.Web.Providers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" connectionStringName="DefaultConnection" applicationName="/" />
      </providers>
    </roleManager>
    <!--
            If you are deploying to a cloud environment that has multiple web server instances,
            you should change session state mode from "InProc" to "Custom". In addition,
            change the connection string named "DefaultConnection" to connect to an instance
            of SQL Server (including SQL Azure and SQL  Compact) instead of to SQL Server Express.
      -->
    <sessionState mode="InProc" customProvider="DefaultSessionProvider">
      <providers>
        <add name="DefaultSessionProvider" type="System.Web.Providers.DefaultSessionStateProvider, System.Web.Providers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" connectionStringName="DefaultConnection" />
      </providers>
    </sessionState>
  </system.web>

  <system.webServer>
    <validation validateIntegratedModeConfiguration="false" />
    <modules runAllManagedModulesForAllRequests="true">
      <remove name="WebDAVModule" />
    </modules>
    <handlers>
      <remove name="WebDAV" />
      <remove name="ExtensionlessUrlHandler-ISAPI-4.0_32bit" />
      <remove name="ExtensionlessUrlHandler-ISAPI-4.0_64bit" />
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <add name="ExtensionlessUrlHandler-ISAPI-4.0_32bit" path="*." verb="GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness32" responseBufferLimit="0" />
      <add name="ExtensionlessUrlHandler-ISAPI-4.0_64bit" path="*." verb="GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS" modules="IsapiModule" scriptProcessor="%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll" preCondition="classicMode,runtimeVersionv4.0,bitness64" responseBufferLimit="0" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
    </handlers>
  </system.webServer>

  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-2.0.0.0" newVersion="2.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-4.0.0.0" newVersion="4.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-2.0.0.0" newVersion="2.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="EntityFramework" publicKeyToken="b77a5c561934e089" />
        <bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-1.3.0.0" newVersion="1.3.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Data.OData" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.6.2.0" newVersion="5.6.2.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Data.Edm" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.6.2.0" newVersion="5.6.2.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Spatial" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.6.2.0" newVersion="5.6.2.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>

  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
  </entityFramework>

  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <alias alias="ICategoryRepository" type="DataAccess.Repository.ICategoryRepository, DataAccess.Repository" />
    <alias alias="IProductRepository" type="DataAccess.Repository.IProductRepository, DataAccess.Repository" />
    <alias alias="IPersonRepository" type="DataAccess.Repository.IPersonRepository, DataAccess.Repository" />
    <alias alias="IShoppingCartRepository" type="DataAccess.Repository.IShoppingCartRepository, DataAccess.Repository" />
    <alias alias="IOrderHistoryRepository" type="DataAccess.Repository.IOrderHistoryRepository, DataAccess.Repository" />
    <alias alias="IProductRecommendationRepository" type="DataAccess.Repository.IProductRecommendationRepository, DataAccess.Repository" />
    <alias alias="IInventoryProductRepository" type="DataAccess.Repository.IInventoryProductRepository, DataAccess.Repository" />
    <alias alias="IStateProvinceRepository" type="DataAccess.Repository.IStateProvinceRepository, DataAccess.Repository" />

    <alias alias="IOrderService" type="DataAccess.Domain.Services.Interface.IOrderService, DataAccess.Domain.Services.Interface" />
    <alias alias="IOrderQueue" type="DataAccess.Domain.Services.Interface.IOrderQueue, DataAccess.Domain.Services.Interface" />
    <alias alias="IOrderProcessor" type="DataAccess.Domain.Services.Interface.IOrderProcessor, DataAccess.Domain.Services.Interface" />
    <alias alias="IInventoryService" type="DataAccess.Domain.Services.Interface.IInventoryService, DataAccess.Domain.Services.Interface" />
    <alias alias="ISalesOrderRepository" type="DataAccess.Repository.ISalesOrderRepository, DataAccess.Repository" />
    <container>

      <!-- mappings for required sql repositories -->
      <register type="ISalesOrderRepository" mapTo="DataAccess.Repo.Impl.Sql.Order.SalesOrderRepository, DataAccess.Repo.Impl.Sql">
        <lifetime type="HierarchicalLifetimeManager" />
      </register>

      <register type="IPersonRepository" mapTo="DataAccess.Repo.Impl.Sql.Person.PersonRepository, DataAccess.Repo.Impl.Sql">
        <lifetime type="HierarchicalLifetimeManager" />
      </register>

      <register type="IInventoryProductRepository" mapTo="DataAccess.Repo.Impl.Sql.Order.InventoryProductRepository, DataAccess.Repo.Impl.Sql">
        <lifetime type="HierarchicalLifetimeManager" />
      </register>

      <register type="IStateProvinceRepository" mapTo="DataAccess.Repo.Impl.Sql.StateProvince.StateProvinceRepository, DataAccess.Repo.Impl.Sql">
        <lifetime type="HierarchicalLifetimeManager" />
      </register>

      <!-- mappings for the InventoryService  services -->
      <register type="IInventoryService" mapTo="DataAccess.Domain.Services.InventoryService, DataAccess.Domain.Services" />

      <!-- mappings for the IOrderService -->
      <register type="IOrderService" mapTo="DataAccess.Domain.Services.OrderService, DataAccess.Domain.Services" />

      <!-- mappings for the IOrderQueue -->
      <register type="IOrderQueue" mapTo="DataAccess.Domain.Services.SimulatedQueue, DataAccess.Domain.Services" />

      <!-- mappings for the IOrderProcessor -->
      <register type="IOrderProcessor" mapTo="DataAccess.Domain.Services.OrderProcessor, DataAccess.Domain.Services" />

      <!-- mappings for in-memory repositories for all NoSQL persistence stores -->
      <!--<register type="ICategoryRepository" mapTo="DataAccess.Repo.Impl.InMemory.CategoryRepository, DataAccess.Repo.Impl.InMemory" />-->
      <!--<register type="IProductRepository" mapTo="DataAccess.Repo.Impl.InMemory.ProductRepository, DataAccess.Repo.Impl.InMemory" />-->
      <!--<register type="IOrderHistoryRepository" mapTo="DataAccess.Repo.Impl.InMemory.OrderHistoryRepository, DataAccess.Repo.Impl.InMemory" />-->

      <!--<register type="IProductRecommendationRepository" mapTo="DataAccess.Repo.Impl.InMemory.ProductRecommendationRepository, DataAccess.Repo.Impl.InMemory" />-->

      <!--<register type="IShoppingCartRepository" mapTo="DataAccess.Repo.Impl.InMemory.ShoppingCartRepository, DataAccess.Repo.Impl.InMemory" />-->

      <!-- mappings for mongo repositories 

          For IOrderHistoryRepository, 
          
          setWriteConcernToJournal to True confirms that the mongod instance has written the data to the on-disk journal 
          and ensures data is not lost if the mongod instance shuts down unexpectedly. If this is causing performance issue, 
          you can set it to false, and then you need to setup some background job make sure that the orderhistroy database has all the 
          record in the order database. 
          
          setWriteConcernToWMajority to True if you have a replica set. It have to set it to False if you only have a single mongo server.
          
      -->
      <register type="ICategoryRepository" mapTo="DataAccess.Repo.Impl.Mongo.Catalog.CategoryRepository, DataAccess.Repo.Impl.Mongo">
        <lifetime type="HierarchicalLifetimeManager" />
        <constructor>
          <param name="hostNames" type="System.String">
            <value value="127.0.0.1" />
          </param>
          <param name="databaseName" type="System.String">
            <value value="eCommerce" />
          </param>
        </constructor>
      </register>
      
      <register type="IProductRepository" mapTo="DataAccess.Repo.Impl.Mongo.Catalog.ProductRepository, DataAccess.Repo.Impl.Mongo">
        <lifetime type="HierarchicalLifetimeManager" />
        <constructor>
          <param name="hostNames" type="System.String">
            <value value="127.0.0.1" />
          </param>
          <param name="databaseName" type="System.String">
            <value value="eCommerce" />
          </param>
        </constructor>
      </register>

      <register type="IOrderHistoryRepository" mapTo="DataAccess.Repo.Impl.Mongo.Order.OrderHistoryRepository, DataAccess.Repo.Impl.Mongo">
        <lifetime type="HierarchicalLifetimeManager" />
        <constructor>
          <param name="hostNames" type="System.String">
            <value value="127.0.0.1" />
          </param>
          <param name="databaseName" type="System.String">
            <value value="eCommerce" />
          </param>
          <param name="setWriteConcernToJournal" type="System.Boolean">
            <value value="True" />
          </param>
          <param name="setWriteConcernToWMajority" type="System.Boolean">
            <value value="False" />
          </param>
        </constructor>
      </register>

      
      <!-- mappings for table storage repositories -->
      
      <register type="IShoppingCartRepository" mapTo="DataAccess.Repo.Impl.TableService.ShoppingCart.ShoppingCartRepository, DataAccess.Repo.Impl.TableService">
       <lifetime type="HierarchicalLifetimeManager" />
      </register>
      


      <!-- mappings for Neo4j repositories -->
      <register type="IProductRecommendationRepository" mapTo="DataAccess.Repo.Impl.Neo4j.Catalog.ProductRecommendationRepository, DataAccess.Repo.Impl.Neo4j">
        <lifetime type="HierarchicalLifetimeManager" />
        <constructor>
          <param name="databaseUri" type="System.Uri">
            <value value="http://localhost:7474/db/data" />
          </param>
        </constructor>
      </register>
      

    </container>
  </unity>
</configuration>